#!/bin/bash

BASEDIR=$(find / -type d -name ses_qa_autotest)
source ${BASEDIR}/exploit/helper.sh


############################################################################################
# FUNCTIONS DEFINITIONS
############################################################################################

function nfs_ganesha_disable_service {
	salt -C 'I@roles:ganesha' cmd.run 'systemctl disable nfs-ganesha'
}

function nfs_ganesha_restart_service {
	salt -C 'I@roles:ganesha' cmd.run 'systemctl restart nfs-ganesha'
}

function set_NFS_HA_IP {
	if [[ $# -eq 1 ]];then
		HA_GANESHA_IP=$1;echo "NFS HA IP is : " $HA_GANESHA_IP
	else
		# Setting the default value
		IP=$(ip route get 8.8.8.8| grep src| sed 's/.*src \(.*\)$/\1/g');IPBASE=${IP%\.*};echo "IP base is: " $IPBASE
		HA_GANESHA_IP=${IPBASE}.149
		echo "NFS HA IP is : " $HA_GANESHA_IP
	fi
	NFS_GANESHA_primary_node=$(_get_fqdn_from_salt_grain_key ceph_ganesha_HA_master_node)
	salt $NFS_GANESHA_primary_node grains.setval NFS_HA_IP $HA_GANESHA_IP
}

function get_NFS_HA_IP {
	echo $(_get_salt_grain_value NFS_HA_IP)
}

function nfs_ha_cluster_bootstrap {
	NFS_GANESHA_primary_node=$(_get_fqdn_from_salt_grain_key ceph_ganesha_HA_master_node)
	NFS_GANESHA_secondary_node=$(_get_fqdn_from_pillar_role ganesha|grep -v $NFS_GANESHA_primary_node)

	salt -C 'I@roles:ganesha' cmd.run 'wget -P /tmp/ http://mirror.suse.cz/install/SLE-12-HA-GM/SLE-12-HA-DVD-x86_64-GM-CD1.iso'
	salt -C 'I@roles:ganesha' cmd.run 'wget -P /tmp/ http://mirror.suse.cz/install/SLE-12-HA-GM/SLE-12-HA-DVD-x86_64-GM-CD2.iso'
	salt -C 'I@roles:ganesha' cmd.run 'zypper ar -t yast2 -c -f "iso:/?iso=/tmp/SLE-12-HA-DVD-x86_64-GM-CD1.iso" ha-1'
	salt -C 'I@roles:ganesha' cmd.run 'zypper ar -t yast2 -c -f "iso:/?iso=/tmp/SLE-12-HA-DVD-x86_64-GM-CD2.iso" ha-2'
	salt -C 'I@roles:ganesha' cmd.run 'zypper in -y ha-cluster-bootstrap'

	# establish passwordless ssh access to HA nodes
	MINION_HA_NODE_1=$NFS_GANESHA_primary_node
	MINION_HA_NODE_2=$NFS_GANESHA_secondary_node
	salt -C 'I@roles:ganesha' cmd.run "sed -i '/StrictHostKeyChecking/c\StrictHostKeyChecking no' /etc/ssh/ssh_config"
	salt $MINION_HA_NODE_1\* cmd.run 'ssh-keygen -t rsa -N "" -f /root/.ssh/id_rsa'
	salt $MINION_HA_NODE_2\* cmd.run 'ssh-keygen -t rsa -N "" -f /root/.ssh/id_rsa'
    PUB_KEY_HA_NODE_1=$(salt $MINION_HA_NODE_1 cmd.run 'cat /root/.ssh/id_rsa.pub' --out yaml|sed 's/.* ssh-rsa/ssh-rsa/g')
    PUB_KEY_HA_NODE_2=$(salt $MINION_HA_NODE_2 cmd.run 'cat /root/.ssh/id_rsa.pub' --out yaml|sed 's/.* ssh-rsa/ssh-rsa/g')
	salt $MINION_HA_NODE_1 cmd.run "echo $PUB_KEY_HA_NODE_2 >> ~/.ssh/authorized_keys"
	salt $MINION_HA_NODE_2 cmd.run "echo $PUB_KEY_HA_NODE_1 >> ~/.ssh/authorized_keys"
	# configure cluster
	salt ${NFS_GANESHA_primary_node} cmd.run 'ha-cluster-init -y'
	# salt ${NFS_GANESHA_secondary_node} cmd.run "ha-cluster-join -c ${NFS_GANESHA_primary_node} -y" # not used because of passwrod prompt
	salt ${NFS_GANESHA_secondary_node} cmd.run "ha-cluster-join -y -c $MINION_HA_NODE_1 csync2"
	salt ${NFS_GANESHA_secondary_node} cmd.run "ha-cluster-join -y -c $MINION_HA_NODE_1 ssh_merge"
	salt ${NFS_GANESHA_secondary_node} cmd.run "ha-cluster-join -y -c $MINION_HA_NODE_1 cluster"
	salt ${NFS_GANESHA_primary_node} cmd.run 'crm configure primitive nfs-ganesha-server systemd:nfs-ganesha op monitor interval=30s'
	salt ${NFS_GANESHA_primary_node} cmd.run 'crm configure clone nfs-ganesha-clone nfs-ganesha-server meta interleave=true'
	salt ${NFS_GANESHA_primary_node} cmd.run "crm configure primitive ganesha-ip IPaddr2 params ip=${HA_GANESHA_IP} cidr_netmask=24 nic=eth0 op monitor interval=10 timeout=20"
	salt ${NFS_GANESHA_primary_node} cmd.run "crm configure commit"
	salt ${NFS_GANESHA_primary_node} cmd.run "crm status"
	salt ${NFS_GANESHA_primary_node} cmd.run "crm resource cleanup nfs-ganesha-server"
	salt ${NFS_GANESHA_primary_node} cmd.run "crm status"
}

function ha_ganesha_ip_failover {
	NFS_GANESHA_primary_node_fqdn=$(_get_fqdn_from_salt_grain_key ceph_ganesha_HA_master_node)
	NFS_GANESHA_primary_node=${NFS_GANESHA_primary_node_fqdn%%\.*}
	echo "Primary nfs-ganesha node is : " $NFS_GANESHA_primary_node
	NFS_GANESHA_secondary_node_fqdn=$(_get_fqdn_from_pillar_role ganesha|grep -v $NFS_GANESHA_primary_node)
	NFS_GANESHA_secondary_node=${NFS_GANESHA_secondary_node_fqdn%%\.*}
	echo "Secondary nfs-ganesha node is : " $NFS_GANESHA_secondary_node
	current_ganesha_ip_node=$(salt ${NFS_GANESHA_primary_node_fqdn} cmd.run "crm status"|grep ganesha-ip|awk '{print $4}')
	echo 'Current ganesha-ip node is :' $current_ganesha_ip_node
	if [[ $current_ganesha_ip_node == $NFS_GANESHA_primary_node ]]; then
		failover_node=$NFS_GANESHA_secondary_node
	else
		failover_node=$NFS_GANESHA_primary_node
	fi
	salt ${NFS_GANESHA_primary_node_fqdn} cmd.run "crm resource migrate ganesha-ip $failover_node"
	sleep 3 # adjustment period
}
# END FUNCTIONS DEFINITIONS
############################################################################################
